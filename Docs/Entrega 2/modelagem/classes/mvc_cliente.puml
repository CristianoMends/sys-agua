@startuml Cliente

skin rose

title Diagrama de Classes MVC - Cliente

class TelaCadastroCliente <<view>> {
  + mostrarFormularioCadastro(): void
  + exibirMensagemSucesso(): void
  + exibirMensagemErro(): void
}

class TelaDetalhesCliente <<view>> {
  + mostrarDetalhes(): Long
  + exibirMensagemErro(): void
}

class TelaListagemCliente <<view>> {
  + listarClientes(): void
  + exibirMensagemErro(): void
}

class ClienteController <<controller>> {
  + cadastrar(cliente: Cliente): boolean
  + atualizar(cliente: Cliente): boolean
  + deletar(id: Long): boolean
  + buscar(id: Long): Cliente
  + listar(): List<Cliente>
}

class Endereco <<model>> {
  - numero: String
  - rua: String
  - bairro: String
  - cidade: String
  - estado: String
}

class Cliente <<model>> {
  - id: Long
  - nome: String
  - endereco: Endereco
  - telefone: String
  --
  + getId(): Long
  + setId(id: Long): void
  + getNome(): String
  + setNome(nome: String): void
  + getEndereco(): Endereco
  + setEndereco(endereco: Endereco): void
  + getTelefone(): String
  + setTelefone(telefone: String): void
}

class ClienteRepository <<model>> {
  + save(cliente: Cliente): void
  + delete(id: Long): void
  + findById(id: Long): Cliente
  + findAll(): List<Cliente>
}

TelaCadastroCliente --> ClienteController: "solicita cadastro"
TelaListagemCliente --> ClienteController: "solicita lista de clientes"
TelaDetalhesCliente --> ClienteController: "solicita detalhe"

ClienteController --> Cliente: "manipula"
ClienteController --> ClienteRepository: "interage"
Cliente --> Endereco: "possui"

@enduml
